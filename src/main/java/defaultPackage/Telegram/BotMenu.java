package defaultPackage.Telegram;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import java.sql.Timestamp;

import java.sql.Connection;
import java.sql.DriverManager;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.UUID;

import defaultPackage.Infrastructure.DatabaseDAO;
import defaultPackage.Infrastructure.UserRepository;
import defaultPackage.Infrastructure.NotificationRepository;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.api.objects.User;

public class BotMenu extends TelegramLongPollingBot {

    private final String username = "@remembering_007_bot"; // –∏–º—è –±–æ—Ç–∞
    private final UserRepository userRepo;
    private final NotificationRepository notificatuonRepo;

    public BotMenu(UserRepository userRepo, NotificationRepository notificatuonRepo) {
        super("6344773460:AAGlQbXDzHijBYpnMHuExjm9D90PATWr8aU");
        this.userRepo = userRepo;
        this.notificatuonRepo = notificatuonRepo;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            long chatId = update.getMessage().getChatId();
            String username = update.getMessage().getFrom().getUserName();

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
            if (!userRepo.userExists(chatId)) {

                sendTextMessage(chatId,
                        "–≠—Ç–æ –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞üîî. –ù–∏–∂–µ –º–æ–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–º:\n ‚úÖ1 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ - 300—Ä. \n ‚úÖ2 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è 500—Ä. \n ‚úÖ3 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - 700—Ä. \n  ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ–ë–µ–∑–ª–∏–º–∏—Ç - 1 –∫–∞—Å–∞—Ä—å.‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ \n –ù–æ–º–µ—Ä –∫–∏–≤–∏: 89172498712 ");
                var user = new defaultPackage.Core.User();
                user.username = username;
                user.id = UUID.randomUUID();
                user.chatId = String.valueOf(chatId);

                userRepo.Add(user);
            }
            // –°—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            Message message = update.getMessage();
            String messageText = message.getText();

            // –†–µ–≥—É–ª—è—Ä–∫–∞ –Ω–∞ "- "
            String regex = "^-\\s";
            Pattern pattern = Pattern.compile(regex);
            Matcher matcher = pattern.matcher(messageText);
            // if (messageText.toLowerCase().contains("—Å–ø–∏—Å–æ–∫")) {
            // System.out.println(1);
            // List<String> arr = notificatuonRepo.getList(chatId);
            // System.out.println(arr);
            // }
            if (messageText.toLowerCase().contains("–ø—Ä–∏–≤–µ—Ç")) {
                String greetingMessage = String.format("–ó–¥—Ä–∞–≤, %s! ", username);
                sendTextMessage(chatId, greetingMessage);
            } else if (matcher.find()) {
                messageText = messageText.substring(2);
                long messageTime = message.getDate();
                String greetingMessage = String.format("–í–∞—à–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–Ω–æ");
                sendTextMessage(chatId, greetingMessage);

                var notification = new defaultPackage.Core.Notification();
                notification.id = UUID.randomUUID();
                notification.title = messageText;
                notification.notifyDateTime = new Timestamp(messageTime * 1000);
                notification.userId = userRepo.getId(chatId);
                notificatuonRepo.Add(notification);

            } else if (messageText.toLowerCase().contains("—Å–ø–∏—Å–æ–∫")) {
                List<String> arr = notificatuonRepo.getList(chatId);
                System.out.println(arr);

                for (int i = 0; i < arr.size(); i++) {
                    String greetingMessage = String.format(i+1+ ". " + arr.get(i));
                    sendTextMessage(chatId, greetingMessage);
                }

            } else {
                String greetingMessage = String.format(
                        "–≠—Ç–æ –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞üîî\n –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω—É–∂–Ω–æ –≤ –Ω–∞—á–∞–ª–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–∏—Å–∞—Ç—å '- '\n –ù–∞–ø—Ä–∏–º–µ—Ä: '- –°—Ö–æ–¥–∏—Ç—å –Ω–∞ –ø–∞—Ä—ã'");
                sendTextMessage(chatId, greetingMessage);
            }

        }
    }

    // –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    private void sendTextMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId); // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞
        message.setText(text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    @Override
    public String getBotUsername() {
        return username;
    }

}
